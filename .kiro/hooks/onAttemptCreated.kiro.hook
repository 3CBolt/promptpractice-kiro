{
  "enabled": true,
  "name": "Attempt Created Evaluator",
  "description": "Automatically processes new attempt files by validating schema, calling /api/compare, and writing evaluation results with comprehensive logging and error handling",
  "version": "1",
  "when": {
    "type": "fileCreated",
    "patterns": [
      "data/attempts/*.json"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "A new attempt file has been created at {filePath}. Please process this attempt with the following comprehensive workflow:\n\n## 1. Schema Validation & Security\n- Validate the JSON against the Attempt schema (id, labId, userPrompt, models[], systemPrompt?, createdAt)\n- Apply path traversal guards: ensure attemptId contains only alphanumeric characters and hyphens\n- Validate prompt lengths: userPrompt and systemPrompt must be â‰¤ 2000 characters\n- Validate models array: 1-3 models, all must be valid model IDs\n\n## 2. Idempotency Check\n- Extract attemptId from filename (remove .json extension)\n- Check if data/evaluations/{attemptId}.json already exists\n- If exists, log 'skipped: evaluation already exists' and exit\n- Check if data/evaluations/{attemptId}.error.json exists from previous failure\n\n## 3. API Call with Retry Logic\n- Extract userPrompt, systemPrompt (optional), and models[] from the attempt\n- Call POST /api/compare with: { userPrompt, systemPrompt?, models }\n- Implement retry logic: up to 3 attempts with exponential backoff (1s, 2s, 4s)\n- Retry on: network errors, 429 rate limit, 500/502/503 server errors\n- Do NOT retry on: 400 validation errors, 401 auth errors\n\n## 4. Result Processing\n- On success: write data/evaluations/{attemptId}.json with pretty JSON format (2-space indent)\n- Include all model results with scores, breakdown, and notes\n- On permanent failure: write data/evaluations/{attemptId}.error.json with:\n  ```json\n  {\n    \"attemptId\": \"...\",\n    \"error\": \"error message\",\n    \"code\": \"HTTP_STATUS or ERROR_TYPE\",\n    \"timestamp\": \"ISO string\",\n    \"retryCount\": number,\n    \"originalAttempt\": { /* attempt data */ }\n  }\n  ```\n\n## 5. Comprehensive Logging\nLog the following information:\n- attemptId and labId\n- models[] used in the request\n- latency per model (from API response)\n- total processing time\n- final status: 'completed', 'failed', or 'skipped'\n- fallback models used (if any)\n- retry attempts made\n\n## 6. Error Handling\n- Use try-catch blocks around all file operations\n- Handle JSON parsing errors gracefully\n- Ensure atomic file writes (write to temp file, then rename)\n- Log all errors with stack traces for debugging\n\nExtract the attemptId from the filename and ensure all operations are safe and idempotent."
  }
}